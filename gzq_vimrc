
" vim是高度可配置的编辑器,最好将vim配置成您喜欢的样式,因为缺省状态下vim所有的特征都是关闭的
" 相关的配置文件及其路径如下:
"  ~/.vimrc vim启动时读取的配置文件
"  ~/.gvimrc gvim启动时读取的配置文件. 最好在此文件中仅保存gui相关设置,因为其设置将覆盖您的.vimrc文件中的相关设置
"  ~/.vim/ 用户添加公用插件,语法高亮插件和排版插件的文件夹

"代表注释

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 一般设定 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 允许语法高亮
" syn on
syntax on

" 关闭语法高亮
" syn off
" syntax off

" 显示空格或者tab的标记
" vim set list
set nolist

" 设置头文件的搜索路径
" gf进入头文件后，ctrl+o可返回原文件
" #include搜寻的目录则由选项 path 决定，其缺省值在 Unix（含 Linux）下为 /usr/include,,
" 注意一般要保留最后的“,,”，除非你不需要在当前目录下搜索
set path+=/usr/include/i386-linux-gnu/

" 在文本界面中，鼠标支持缺省没有被激活,激活文本界面中的鼠标支持：
set mouse=a 

" 单击移动光标到点击的位置
" 在帮助的关键字上双击显示该关键字相关的帮助信息
" 在普通文本上双击选中点击位置的单词
" 拖动鼠标选中文本
" 使用鼠标滚轮滚动当前缓冲区中的文本
" 多窗口编辑时可以拖动窗口分栏的位置

set selection=exclusive 
" set selectmode=mouse,key 
 
" 设定默认解码 
set fenc=utf-8 
set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936 

" 不要vim模仿vi模式,不使用和vi兼容的键盘模式，只使用vim自己的键盘模式
set nocompatible 

" history文件中需要记录的行数
" 设置冒号命令和搜索命令的命令历史列表的长度为
set history=100 

" 在处理未保存或只读文件的时候，弹出确认 
set confirm 

" 带有如下符号的单词不要被换行分割 
set iskeyword+=_,$,@,%,#,- 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 文件设置 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 不要备份文件（根据自己需要取舍） 
set nobackup

" 不要生成swap文件，当buffer被丢弃的时候隐藏它 
setlocal noswapfile
set bufhidden=hide 

"设定文件浏览器目录为当前目录
set bsdir=buffer
set autochdir

"读文件时自动设定当前目录为刚读入文件所在的目录
autocmd BufReadPost * cd %:p:h

" 增强模式中的命令行自动完成操作 
set wildmenu

"显示行号
set number 

"不显示行号
" set nonumber 

" 在 Vim 窗口右下角,标尺的右边显示未完成的命令
set showcmd

" 命令行（在状态行下）的高度，默认为1
set cmdheight=1

" 显示状态栏 (默认值为 1, 无法显示状态栏)
set laststatus=2

" 打开状态栏标尺,总在 Vim 窗口的右下角显示当前光标位置(在状态行上显示光标所在位置的行号和列号)
set ruler 
"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%) 

" 我的状态行显示的内容（包括文件类型和解码） 
" set statusline=%F%m%r%h%w\(%l,%v)[%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")}
" set statusline=%F%m%r,%Y,%{&fileformat}\ \ \ ASCII=\%b,HEX=\%B\ \ \ %l,%c%V\ %p%%\ \ \ [\ %L\ lines\ in\ all\ ]
set statusline=%F%m%r%h%w\ (%l,%v)[%p%%]
" 设置在状态行显示的信息如下：
" %F    当前文件名
" %m    当前文件修改状态
" %r    当前文件是否只读
" %Y    当前文件类型
" %{&fileformat}
"       当前文件编码
" %b    当前光标处字符的 ASCII 码值
" %B    当前光标处字符的十六进制值
" %l    当前光标行号
" %c    当前光标列号
" %V    当前光标虚拟列号 (根据字符所占字节数计算)
" %p    当前行占总行数的百分比
" %%    百分号
" %L    当前文件总行数

" 在被分割的窗口间显示空白，便于阅读 
set fillchars=vert:\ ,stl:\ ,stlnc:\ 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 搜索和匹配 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 高亮显示匹配的括号 
set showmatch 

" 匹配括号高亮的时间（单位是十分之一秒） 
set matchtime=5 

" 在搜索的时候忽略大小写 
set ignorecase 

" 高亮搜索到的结果（phrases） 
set hlsearch 

" 在搜索时，显示当时相应的匹配点,输入的词句的逐字符高亮 
set incsearch 

" 制表符可见
" set list
" 制表符的显示方式
" set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$
set listchars=tab:>.,trail:-

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 文本格式和排版 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
set noexpandtab

" 语言编码的相关的设置：

" 环境变量 LANG（使用的语言）；
" 环境变量 LC_CTYPE（使用的内部编码）；
" encoding（Vim 的内部编码）；
" termencoding（Vim 在与屏幕/键盘交互时使用的编码）；
" fileencoding（Vim 当前编辑的文件在存储时的编码）；
" fileencodings（Vim 打开文件时的尝试使用的编码）；
" ambiwidth（对“不明宽度”字符的处理方式；Vim 6.1.455 后引入）。

" Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、消息文本等。
set encoding=utf-8

" Vim 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。
" set fileencodings=ucs-bom,utf-8,gb2312,gb18030,big5,euc-jp,euc-kr,latin1
set fileencodings=ucs-bom,utf-8,chinese

set ambiwidth=double

"转换文件编码
set fileencoding=utf-8
" set fileencoding=chinese

set langmenu=zh_CN.UTF-8

language message zh_CN.UTF-8

" 自动切换当前目录为当前文件所在的目录
"set autochdir

" 设定配色方案
" 查看：ls -l  /usr/share/vim/vim73/colors/
" colorscheme blue
" colorscheme delek
" colorscheme evening
" colorscheme murphy
" colorscheme slate
" colorscheme darkblue
" colorscheme desert
" colorscheme koehler
" colorscheme pablo
" colorscheme ron
" colorscheme torte
" colorscheme default
" colorscheme elflord
" colorscheme morning
" colorscheme peachpuff
" colorscheme shine
" colorscheme zellner

" 空格、制表符和缩进
" shiftwidth（缩进的空格数）
" tabstop（制表符的宽度）；
" expandtab（是否在缩进和遇到 Tab 键时使用空格替代；使用 noexpandtab 取消设置）；
" softtabstop（软制表符宽度，设置为非零数值后使用 Tab 键和 Backspace 时光标移动的格数等于该数值，但实际插入的字符仍受 tabstop 和 expandtab 控制）；
" autoindent（自动缩进，即每行的缩进值与上一行相等；使用 noautoindent 取消设置）；
" cindent（使用 C 语言的缩进方式，根据特殊字符如“{”、“}”、“:”和语句是否结束等信息自动调整缩进；在编辑
" C/C++ 等类型文件时会自动设定；使用 nocindent 取消设置）；
" cinoptions（C 语言缩进的具体方式，请参考“:help cinoptions-values”）；
" paste（粘贴模式，会取消所有上述选项的影响来保证后面的操作——通常是从剪贴板粘贴代码——保持原有代码的风格；使用 nopaste 取消设置）。

" 自动格式化 
set formatoptions=tcrqn 

" 在启动一个新行的时候使用与前一行一样的缩进
set autoindent 

" 为C程序提供自动缩进 
set smartindent 

" 使用C样式的缩进 
set cindent

" 不要用空格代替制表符 
set noexpandtab

" 打开普通文件类型的自动缩进。
" 该自动缩进不如 cindent 智能， 但它可以为你编辑非C/C++ 文件提供一定帮助。
" set ai

" 设定 制表符 tab 的 长度为 4
set tabstop=4 

" 使得按退格键时可以一次删掉 4 个空格
set softtabstop=4

" shift + < 和 shift + > 命令移动内容时的宽度为 4,（不足 4 个时删掉所有剩下的空格）
set shiftwidth=4 

" 设定光标离窗口上下边界 5 行时窗口自动滚动
" set scrolloff=5

" 一行显示不下时，不自动换行显示
set nowrap 

" 屏幕放不下时，按一次屏幕移动一个字符
set sidescroll=1

" 下面的滚动条开启

" 设定退格键、空格键以及左右方向键在行首行尾时的行为，不影响 h 和 l 键
" 默认情况下， 在 VIM 中当光标移到一行最左边的时候， 继续按左键，光标不能回到上一行的最右边。 
" 同样地， 光标到了一行最右边的时候， 不能通过继续按右跳到下一行的最左边。
" 但是， 通过设置 whichwrap可以对一部分按键开启这项功能。
" 如果想对某一个或几个按键开启到头后自动折向下一行的功能，
" 可以把需要开启的键的代号写到 whichwrap 的参数列表中，
" 各个键之间使用逗号分隔。以下是 whichwrap 支持的按键名称列表：
" b：在 Normal 或 Visual 模式下按删除(Backspace)键。
" s：在 Normal 或 Visual 模式下按空格键。
" h：在 Normal 或 Visual 模式下按 h 键。
" l：在 Normal 或 Visual 模式下按 l 键。
" <：在 Normal 或 Visual 模式下按左方向键。
" >：在 Normal 或 Visual 模式下按右方向键。
" ~：在 Normal 模式下按 ~ 键(翻转当前字母大小写)。
" [：在 Insert 或 Replace 模式下按左方向键。
" ]：在 Insert 或 Replace 模式下按右方向键
set whichwrap=b,s,<,>,~,[,]

" 在行和段开始处使用制表符 
set smarttab

" 读文件时自动设定当前目录为刚读入文件所在的目录
autocmd BufReadPost * cd %:p:h

" 不在单词中间断行。 设置了这个选项后， 如果一行文字非常长， 无法在一行内显示完的话，
" 它会在单词与单词间的空白处断开， 尽量不会把一个单词分成两截放在两个不同的行里
set lbr

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" C/C++ 编码设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示括号配对情况。 打开这个选项后， 
" 当输入后括号 (包括小括号、中括号、大括号)的时候， 光标会跳回前括号片刻， 然后跳回来， 以此显示括号的配对情况
" set sm

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 添加自动括号补全功能 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {}<ESC>i
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>
" :inoremap < <><ESC>i
" :inoremap > <c-r>=ClosePair('>')<CR>

"function ClosePair(char)
"	if getline('.')[col('.') - 1] == a:char
"		return "\<Right>"
"	else
"		return a:char
"	endif
"endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" Taglist的设定 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Taglist不自动打开
let Tlist_Auto_Open = 1

" Tlist_Use_Horiz_Window为1设置taglist窗口横向显示；
" Tlist_Use_Horiz_Window为0设置taglist窗口纵向显示；
let Tlist_Use_Horiz_Window = 0

" taglist 窗口宽度,纵向时才有作用
let Tlist_WinWidth =25 

" taglist 窗口高度,横向时才有作用
let Tlist_WinHeight = 20

" 在左侧显示窗口 
let Tlist_Use_Lift_Window = 1

" 在右侧显示窗口 
" let Tlist_Use_Right_Window = 1

" 按照名称排序,缺省是按tag在文件中出现的顺序进行排序
" let Tlist_Sort_Type = "name" 

" Tlist_Ctags_Cmd选项用于指定你的Exuberant ctags程序的位置
let Tlist_Ctags_Cmd = 'ctags'

" taglist窗口是最后一个窗口时退出VIM，设置Tlist_Exit_OnlyWindow为１
let Tlist_Exit_OnlyWindow = 1

" 如果你希望在选择了tag后自动关闭taglist窗口，设置Tlist_Close_On_Select为1
let Tlist_Close_On_Select = 0

" 当同时显示多个文件中的tag时，设置Tlist_File_Fold_Auto_Close为１，
" 使taglist只显示当前文件tag，其它文件的tag都被折叠起来。
let Tlist_File_Fold_Auto_Close = 1

" 在使用:TlistToggle打开taglist窗口时，如果希望输入焦点在taglist窗口中，
" 设置Tlist_GainFocus_On_ToggleOpen为1；
" let Tlist_GainFocus_On_ToggleOpen = 1

" 如果希望taglist始终解析文件中的tag，不管taglist窗口有没有打开，
" 设置Tlist_Process_File_Always为1；
let Tlist_Process_File_Always = 1

" 设置ctags的寻找路径
set tags=./tags,/usr/include/tags,$HOME/.vim/tags

" 在taglist窗口中，可以使用下面的快捷键：
" <CR>          跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样
" o             在一个新打开的窗口中显示光标下tag
" <Space>       显示光标下tag的原型定义
" u             更新taglist窗口中的tag
" s             更改排序方式，在按名字排序和按出现顺序排序间切换
" x             taglist窗口放大和缩小，方便查看较长的tag
" +             打开一个折叠，同zo
" -             将tag折叠起来，同zc
" *             打开所有的折叠，同zR
" =             将所有tag折叠起来，同zM
" [[            跳到前一个文件
" ]]            跳到后一个文件
" q             关闭taglist窗口
" <F1>          显示帮助

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 设置语法折叠 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 开始折叠
set foldenable

" 设置语法折叠
set foldmethod=syntax

" 手动折叠
" set foldmethod=manual  

" 根据缩进折叠
"set foldmethod=indent

" 设置折叠区域的宽度
set foldcolumn=0

" 设置折叠层数为
setlocal foldlevel=2

" 设置为自动关闭折叠                            
set foldclose=all

"打开文件是默认不折叠代码
set foldlevelstart=99

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 自定义快捷键
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" p命令可以使用剪切板上的内容来替还选中的内容
vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

map <silent> <leader>te <Esc>: 

" 取消高亮
nmap <F2> <ESC>:nohlsearch<CR>
imap <F2> <ESC>:nohlsearch<CR>

" 切换到普通模式并输入":"号
map <F3> <ESC>:
imap <F3> <ESC>:

" 文件比较 
" map <F3> <ESC>:set diff<CR>
" imap <F3> <ESC>:set diff<CR>

" 保存退出
map <F4> <ESC>:x!<CR>
imap <F4> <ESC>:x!<CR>

" 编译执行
map <F5> <ESC>:call CompileRunGcc()<CR>
imap <F5> <ESC>:call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	" C的编译和运行 
	if &filetype == 'c'
		exec "!gcc % -o %<"
		exec "! ./%<"
	" C++的编译和运行
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "! ./%<"
	elseif &filetype == 'java' 
		exec "!javac %" 
		exec "!java %<"
	elseif &filetype == 'sh'
		exec "!chmod +x %"
		exec "!./%"
	elseif &filetype == 'py'
		exec "!python %"
		exec "!python %<"
	endif
endfunc

"C,C++的调试
"map <F6> :call Rungdb()<CR>
"imap <F6> <ESC>:call Rungdb()<CR>
"func! Rungdb()
"	exec "w"
"	exec "!g++ % -g -o %<"
"	exec "!gdb ./%<"
"endfunc

" :%!xxd		将当前文本转换为16进制格式
" :%!od			将当前文本转换为16进制格式
" :%!xxd -r		将当前文件转换回文本格式
" :%!xxd -c n	将当前文本转换为16进制格式,并每行显示n个字节。
map <F6> <ESC>:%!xxd 
imap <F6> <ESC>:%!xxd 

" 转换文件的编码为utf-8
map <F7> <ESC>:set fileencoding=utf-8<CR>
imap <F7> <ESC>:set fileencoding=utf-8<CR>

" 查找
" nmap <F8> <ESC>:tselect <C-R>=expand("<cword>")<CR><CR>
" imap <F8> <ESC>:tselect <C-R>=expand("<cword>")<CR><CR>
nmap <F8> <ESC>:w!<CR><ESC>:!ctags ./* -R<CR><ESC>:tselect 
imap <F8> <ESC>:w!<CR><ESC>:!ctags ./* -R<CR><ESC>:tselect

" 符号列表
map <F9> <ESC>:w!<CR><ESC>:!ctags ./* -R<CR><ESC>:TlistToggle<CR>
imap <F9> <ESC>:w!<CR><ESC>:!ctags ./* -R<CR><ESC>:TlistToggle<CR>

"用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 载入文件类型插件 
filetype plugin on

" 为特定文件类型载入相关缩进文件 
filetype indent on

"打开文件类型检测, 加了这句才可以用智能补全
set completeopt=longest,menu

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
" 新建.c,.h,.sh,.java文件时，自动插入文件头 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
"autocmd BufNewFile *.c,*.h,*.sh,*.cpp,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头

function Set_SH_Title()
	call setline(1,				"\#########################################################################") 
	call append(line("."),		"\# File Name: ".expand("%")) 
	call append(line(".")+1,	"\# Author: wu_jun_zhan") 
	call append(line(".")+2,	"\# Mail: bonwind@163.com")
	call append(line(".")+3,	"\# Created Time: ".strftime("%c")) 
	call append(line(".")+4,	"\#########################################################################") 
	call append(line(".")+5,	"\#!/bin/bash") 
	call append(line(".")+6,	"")
endfunction

function Set_Com_Title()
	call setline(1,				"/*************************************************************************") 
	call append(line("."),		"* File Name: ".expand("%")) 
	call append(line(".")+1,	"* Author: wu_jun_zhan") 
	call append(line(".")+2,	"* Mail: bonwind@163.com") 
	call append(line(".")+3,	"* Created Time: ".strftime("%c")) 
	call append(line(".")+4,	"*************************************************************************/") 
	call append(line(".")+5,	"")
endfunction

function Set_C_Title()
	call Set_Com_Title()
	call append(line(".")+6,	"#include <stdio.h>")
	call append(line(".")+7,	"")
endfunction

function Set_Cpp_Title()
	call Set_Com_Title()
	call append(line(".")+6, 	"#include <iostream>")
	call append(line(".")+7, 	"using namespace std;")
	call append(line(".")+8, 	"")
endfunction

func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'sh' 
		call Set_SH_Title()
	elseif &filetype == 'c'
		call Set_C_Title()
	elseif &filetype == 'cpp'
		call Set_Cpp_Title()
	endif
	"	if &filetype == 'java'
	"		call append(line(".")+6,"public class ".expand("%"))
	"		call append(line(".")+7,"")
	"	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc 

" % 括号匹配
" gd 跳转到局部变量定义
"
"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
set csprg=/usr/bin/cscope
set csto=1
set cst
set nocsverb
" add any database in current directory
if filereadable("/home/gzq/rockchip/140919/rk3288-cam/cscope.out")
cscope add /home/gzq/rockchip/140919/rk3288-cam/cscope.out
endif
set csverb
endif 

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR>



set tags=/home/gzq/rockchip/140919/temp/stm32_leran/



